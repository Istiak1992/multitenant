# Generated by Django 3.2.10 on 2023-03-18 13:26

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('photo', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('address', models.TextField(blank=True, max_length=500)),
                ('password_plain', models.CharField(blank=True, max_length=48)),
                ('language_preferences', models.CharField(choices=[('AR', 'Arabic'), ('EN', 'English')], default='EN', max_length=2)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('photo', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_photo', to='photo.photo')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'permissions': (('can_add_supervisor', 'Can add Supervisor'), ('can_add_inspector', 'Can add Inspector'), ('can_add_distributor', 'Can add Distributor'), ('role__supervisor', 'Role Supervisor'), ('dashboard', 'Dashboard'), ('notification_center', 'Notification Center'), ('manage_profile', 'Manage Profile'), ('inspectors_full', 'Inspector Full'), ('distributors_full', 'Distributor Full'), ('inspections', 'Inspections'), ('qa_report', 'QA Report'), ('dashboard_inspectors', 'Dashboard Inspectors View'), ('dashboard_distributors', 'Dashboard Distributors View'), ('dashboard_inspections', 'Dashboard Inspections View'), ('role__manager', 'Role QA'), ('supervisors_full', 'Supervisors Full'), ('qa_inspection', 'QA Inspection'), ('distributor_notification', 'distributor_notification'), ('distributor_fine', 'Distributor Fine'), ('reports', 'Reports'), ('dashboard_supervisors', 'Dashboard Supervisors'), ('role__account', 'Role Account'), ('distributor_detail', 'Distributor Detail'), ('dashboard_distributor_notifications', 'Dashboard Distributor Notifications'), ('dashboard_distributor_warnings', 'Dashboard Distributor Warnings'), ('role__finance', 'Role Finance'), ('distributor_fine__finance', 'Distributor Fine Finance'), ('role__legal', 'Role Legal'), ('distributor_warning__legal', 'Distributor Warning Legal'), ('role__inspector', 'Role Inspector'), ('role__distributor', 'Role Distributor'), ('distributor_visits', 'Distributor Visits')),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
